Word Grid Game: App Design Flow
This document specifies the user interface (UI) and user experience (UX) flow for the word grid game, breaking down the application into its key screens, states, and component interactions.

1. Initial View: The Lobby
This is the landing screen for every user. It's clean, simple, and presents two clear choices.

Player Identity:

Welcome Modal: Upon first visit, a modal appears, prompting the user for their name.

Input Field: A primary text input for the user to enter their desired display name.

Name Suggestions: A 'Suggest Name üí°' button is present next to the input field. When clicked, it populates the input field with a randomly selected name from a predefined list (e.g., 'DaringDigger', 'LexiconLasso', 'WordWizard'). A random 3-digit number is appended to ensure uniqueness (e.g., 'WordWizard289'). The user can click the button multiple times for new suggestions.

Action-Oriented Confirmation: The modal directly includes the "Create Game" and "Join Game" options, allowing the user to enter their name and immediately choose their next action in a single step, streamlining the entry process.

Visual Layout:

After the name is set, the main lobby screen is shown.

The layout features two main panels, 'Create Game' and 'Join Game'. These are displayed side-by-side on large screens and stack vertically on mobile devices to ensure a clean, responsive interface.

Panel A: Create Game (For the Host)

Title: "Create Game"

Game Settings:

Time: Input field (default: 45s)

Min Word Length: Input field (default: 3)

Grid Size: Dropdown menu (default: 4x4)

Word Filters: A dynamic section where the host can add or remove tags (e.g., "noun", "verb", "adjective", "no-plurals", ‚Äúadverb‚Äú).

Action Button: A prominent "Create New Game" button at the bottom.

Panel B: Join Game (For Players)

Title: "Join Game"

Instructions: A brief text explaining how to get a Game ID from a friend.

Input Field: A text box for players to paste the Game ID.

Action Button: A "Join Game" button. If the entered Game ID is invalid or the game is full, the system should display a clear error message (e.g., 'Game not found.') without clearing the user's input.

2. Game View: The Main Interface
Once a game is created or joined, the user transitions to the main game screen. The layout dynamically changes based on the game's status.

A. Waiting for Game to Start (status: 'waiting')

Layout: All three panels (Left, Center, Right) are visible. It should be vertical when the display is small like on cell phone.

Center Panel: The game grid area shows a placeholder or a message like "Waiting for Host to start...".

Leaderboard (Left Panel): This panel displays a real-time list of all players currently in the lobby. Clicking the 'Leaderboard üîé' title opens the detailed history modal.

Left Panel (Host Only): In this state (between rounds), the host sees special controls in the left panel. This includes input fields for "Next Round Time" and "Next Round Min Length," which are pre-filled with the settings from the previous round. The "Start Next Round" button is also visible here.

B. Ready Check Phase (status: 'ready-check')

Trigger: The Host clicks "Start Game" or "Start Next Round". The game status changes from waiting to ready-check.

UI: A full-screen, semi-transparent modal appears for all players. This modal is titled "Ready Check!" and displays:

A list of all players in the game.

A checkbox next to each player's name.

Player Interaction:

Each player can click the checkbox next to their own name to mark themselves as ready. This action is updated in real-time for all players to see (e.g., the checkbox becomes checked ‚úÖ).

Checkboxes for other players are disabled.

Host Interaction:

The Host must also check in.

A "Force Start" button is visible only to the Host. This button is disabled for the first 15 seconds to give players a chance to check in. After 15 seconds, the Host can click it to proceed even if not all players are ready.

Transition: The game proceeds to the next status (starting) when either:

All players have checked the "ready" box.

The Host clicks the "Force Start" button.

C. Starting a Round (status: 'starting')

Trigger: The ready-check phase is completed.

UI: The "Ready Check" modal closes, and a full-screen, semi-transparent overlay appears for all players.

Animation: A large countdown appears in the center of the screen: "3... 2... 1... GO!".

Transition: After the animation, the status changes to playing, and the round begins.

D. During a Round (status: 'playing')

Layout: All three panels (Left, Center, Right) remain visible on large screens. On smaller screens, the layout may adjust to prioritize the grid. A Help Icon (?) is visible in a corner of the screen.

Center Panel:

The Game Grid is active and filled with letters.

The Timer is counting down at the top.

A Microphone Icon (üé§) is visible next to the timer, allowing for voice input.

Right Panel: The player's word entry components are fully visible and usable. When a new round begins, the 'Current Word' display and 'My Words' list are automatically cleared for all players.

E. End of Round (status: 'scoring')

Layout: All three panels reappear automatically. The host's controls for the next round become visible in the left panel.

Scoring Modal: A modal appears, showing a score breakdown. Words are sorted and styled by status. Any score changes made by the host are instantly recalculated and reflected in the UI for all players in real-time. On desktop, this modal is draggable.

Post-Round Insights (Gemini Feature):

After scores are finalized, a 'Reveal Top Words üí°' button appears in the Scoring Modal. Clicking this opens a new modal displaying the top 10 highest-scoring words that could have been formed from the grid letters, generated by the Gemini Flash model. This provides a fun, educational moment for players to see what they missed.

Player Interactions:

All Players: Can click on a word's text to open the dictionary modal.

Host-Specific Controls:

Dynamic Round Settings: Between rounds (in the waiting or scoring state), the host can use input fields in the left panel to adjust the timer duration and minimum word length for the upcoming round. These new settings are applied when the host clicks "Start Next Round."

Host Score Overrides: In an "Edit Mode" (toggled by a checkbox), the host can approve (üëç) or reject (üëé) any word. These changes are staged locally in the UI. A dedicated "Apply & Recalculate" button saves all overrides at once, updating scores for all players. The 'Reveal Top Words' button becomes enabled for all players only after the host has finalized the scores.

Next Round/Restart: The host also has controls to "Start Next Round" or "End & Restart Game."

3. Key UI Components & Interactions
3.1 Detailed Standings & Round History:

Clicking the "Leaderboard üîé" title opens a full-screen modal showing a round-by-round score history.

The modal header contains clickable round numbers (e.g., 'Round 1', 'Round 2'). Clicking a round number populates the view below with all words submitted by every player during that round. Each word in this view remains clickable to open its dictionary definition.

3.2 Comprehensive Dictionary Modal:

When a word is clicked, a new, top-level modal appears, listing all its definitions.

3.3 Voice Input (Microphone Feature):

Trigger: Player clicks the microphone icon (üé§) next to the timer or presses the Space Bar during the playing state.

UI State Change:

The Current Word display area changes to show a "Listening..." message. The mic icon can also change its appearance (e.g., pulse or glow) to provide feedback.

Speech Recognition:

The browser's Web Speech API is activated. It will prompt the user for microphone permission on the first use.

The API captures the user's speech.

Transcription & Display:

Once the user stops speaking, the API returns the transcribed text.

The Current Word display is populated with the transcribed word. This display functions as an editable input field, allowing the user to correct any transcription errors with their keyboard before submitting.

Validation & Submission:

Client-Side Check: The application will automatically check if the letters in the transcribed word can be formed from the letters currently available on the grid.

If the letters are available, the corresponding dice on the grid are automatically selected.

If the letters are not available (e.g., the word requires two 'P's but only one is on the grid), the Current Word display is cleared, and a subtle visual error (like a shake or red flash) is shown.

Submission: The player clicks the existing "Submit" button to finalize the word.

3.4 Help & Instructions Modal:

Trigger: Player clicks the Help icon (?) located in a corner of the game view.

UI: A simple, clean modal appears, overlaying the game.

Content: The modal is titled "How to Play" and contains a list of key controls:

Space Bar: Activate microphone for voice input.

Enter: Submit the current word.

Backspace: Remove the last selected letter.

Mouse Click: Select letters from the grid.

Keyboard: Type letters to select them from the grid.

Dismiss: The modal can be closed by clicking an 'X' button or by clicking outside the modal area.

3.5 Single-Player Flow:

The flow is identical for a single player. The app automatically adjusts scoring rules in the background.

4. Gemini Integration Prompt
System Prompt:
You are an expert lexicographer for a word game. Your task is to identify the highest-scoring valid English words that can be constructed from a given set of letters.Constraints:

You will be given an array of single-character strings (the 'grid letters') and a minimum word length.

You can only use each letter from the input array once per word. For example, if the input is ['A', 'P', 'P', 'L', 'E'], you can form the word 'APPLE', but not 'PAPER' as there is only one 'A'.

All generated words must be at least the specified minimum length.

All generated words must be valid English dictionary words.

Prioritize longer words as they score more points.Output Format:
Your response must be a single, valid JSON object. The object should contain a single key, topWords, which is an array of objects. Each object in the array should have two keys: word (the generated word as a string) and score (the word's length as an integer). Provide up to 10 of the highest-scoring words. If fewer than 10 words can be formed, return as many as you can find. If no valid words can be formed, return an empty array.

Example User Prompt:
{"letters": ["T", "C", "A", "I", "S", "B", "R", "O", "P", "L", "E", "M"], "minLength": 4}

Raw API Response:

{"candidates":[{"content":{"parts":[{"text":"```json\n{\n  \"topWords\": [\n    {\n      \"word\": \"BOASTER\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"BLISTER\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"BOLTERS\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"COMPARE\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"CORBELS\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"IMPLORE\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"MARBLES\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"PALMERS\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"PARCELS\",\n      \"score\": 7\n    },\n    {\n      \"word\": \"PASTIME\",\n      \"score\": 7\n    }\n  ]\n}\n```"}],"role":"model"},"finishReason":"STOP","index":0}],"usageMetadata":{"promptTokenCount":320,"candidatesTokenCount":243,"totalTokenCount":5782,"promptTokensDetails":[{"modality":"TEXT","tokenCount":320}],"thoughtsTokenCount":5219},"modelVersion":"models/gemini-2.5-flash-preview-04-17","responseId":"C6BZaKrOJePRjrEP1Jvq0QE"}

